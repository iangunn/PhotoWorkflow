# Array of packages to install
$packages = @(
    "OliverBetz.ExifTool",
    "Nikkho.FileOptimizer"
    # Add more packages as needed
)

Write-Host "üîç Checking package status..." -ForegroundColor Cyan

# Function to install or update a package
function Install-WingetPackage {
    param (
        [string]$packageId
    )
    
    Write-Host "`nüì¶ Processing $packageId... " -ForegroundColor White -NoNewline
    
    # Check if package is installed
    $checkResult = winget list --id $packageId --accept-source-agreements 2>$null
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Installed" -ForegroundColor Green
        Write-Host "   üîÑ Checking for updates..." -ForegroundColor Cyan
        
        # Check for updates
        $updateCheck = winget upgrade --query $packageId
        if ($updateCheck -match "No available upgrade found") {
            Write-Host "   ‚ú® Already up to date!" -ForegroundColor Green
        } else {
            Write-Host "   ‚ö†Ô∏è Update available" -ForegroundColor Yellow
            Write-Host "   üì• Installing update..." -ForegroundColor Cyan
            winget upgrade --id $packageId --accept-source-agreements
            if ($LASTEXITCODE -eq 0) {
                Write-Host "   ‚úÖ Update successful!" -ForegroundColor Green
            } else {
                Write-Host "   ‚ùå Update failed" -ForegroundColor Red
            }
        }
    } else {
        Write-Host "‚ùå Not installed" -ForegroundColor Red
        Write-Host "   üì• Installing package..." -ForegroundColor Cyan
        winget install --id $packageId --accept-source-agreements
        if ($LASTEXITCODE -eq 0) {
            Write-Host "   ‚úÖ Installation successful!" -ForegroundColor Green
        } else {
            Write-Host "   ‚ùå Installation failed" -ForegroundColor Red
        }
    }
}

# Process each package
foreach ($package in $packages) {
    Install-WingetPackage -packageId $package
}

Write-Host "`n‚ú® Package management process completed! ‚ú®" -ForegroundColor Green